// Code generated by mockery v2.46.0. DO NOT EDIT.

package mockusecase

import (
	context "context"
	model "tenant/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// TenantUsecase is an autogenerated mock type for the TenantUsecase type
type TenantUsecase struct {
	mock.Mock
}

// CreateTenant provides a mock function with given fields: ctx, name
func (_m *TenantUsecase) CreateTenant(ctx context.Context, name string) (*model.Tenant, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateTenant")
	}

	var r0 *model.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Tenant, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Tenant); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTenant provides a mock function with given fields: ctx, clientID
func (_m *TenantUsecase) DeleteTenant(ctx context.Context, clientID string) error {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTenant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTenant provides a mock function with given fields: ctx, clientID
func (_m *TenantUsecase) GetTenant(ctx context.Context, clientID string) (*model.Tenant, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetTenant")
	}

	var r0 *model.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Tenant, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Tenant); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPayload provides a mock function with given fields: ctx, clientID, payload
func (_m *TenantUsecase) ProcessPayload(ctx context.Context, clientID string, payload interface{}) error {
	ret := _m.Called(ctx, clientID, payload)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, clientID, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTenantUsecase creates a new instance of TenantUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantUsecase {
	mock := &TenantUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
