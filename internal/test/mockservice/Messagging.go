// Code generated by mockery v2.46.0. DO NOT EDIT.

package mockservice

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Messagging is an autogenerated mock type for the Messagging type
type Messagging struct {
	mock.Mock
}

// Consume provides a mock function with given fields: ctx, queueName, handler
func (_m *Messagging) Consume(ctx context.Context, queueName string, handler func(string)) error {
	ret := _m.Called(ctx, queueName, handler)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(string)) error); ok {
		r0 = rf(ctx, queueName, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateQueue provides a mock function with given fields: queueName
func (_m *Messagging) CreateQueue(queueName string) error {
	ret := _m.Called(queueName)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(queueName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteQueue provides a mock function with given fields: queueName
func (_m *Messagging) DeleteQueue(queueName string) error {
	ret := _m.Called(queueName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(queueName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, queueName, message
func (_m *Messagging) Publish(ctx context.Context, queueName string, message interface{}) error {
	ret := _m.Called(ctx, queueName, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, queueName, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartQueue provides a mock function with given fields: ctx, queueName, handler
func (_m *Messagging) StartQueue(ctx context.Context, queueName string, handler func(string)) error {
	ret := _m.Called(ctx, queueName, handler)

	if len(ret) == 0 {
		panic("no return value specified for StartQueue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(string)) error); ok {
		r0 = rf(ctx, queueName, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessagging creates a new instance of Messagging. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessagging(t interface {
	mock.TestingT
	Cleanup(func())
}) *Messagging {
	mock := &Messagging{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
