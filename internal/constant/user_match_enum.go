// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package constant

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// UserMatchTypePass is a UserMatchType of type pass.
	UserMatchTypePass UserMatchType = "pass"
	// UserMatchTypeLike is a UserMatchType of type like.
	UserMatchTypeLike UserMatchType = "like"
)

var ErrInvalidUserMatchType = fmt.Errorf("not a valid UserMatchType, try [%s]", strings.Join(_UserMatchTypeNames, ", "))

var _UserMatchTypeNames = []string{
	string(UserMatchTypePass),
	string(UserMatchTypeLike),
}

// UserMatchTypeNames returns a list of possible string values of UserMatchType.
func UserMatchTypeNames() []string {
	tmp := make([]string, len(_UserMatchTypeNames))
	copy(tmp, _UserMatchTypeNames)
	return tmp
}

// UserMatchTypeValues returns a list of the values for UserMatchType
func UserMatchTypeValues() []UserMatchType {
	return []UserMatchType{
		UserMatchTypePass,
		UserMatchTypeLike,
	}
}

// String implements the Stringer interface.
func (x UserMatchType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x UserMatchType) IsValid() bool {
	_, err := ParseUserMatchType(string(x))
	return err == nil
}

var _UserMatchTypeValue = map[string]UserMatchType{
	"pass": UserMatchTypePass,
	"like": UserMatchTypeLike,
}

// ParseUserMatchType attempts to convert a string to a UserMatchType.
func ParseUserMatchType(name string) (UserMatchType, error) {
	if x, ok := _UserMatchTypeValue[name]; ok {
		return x, nil
	}
	return UserMatchType(""), fmt.Errorf("%s is %w", name, ErrInvalidUserMatchType)
}

// MarshalText implements the text marshaller method.
func (x UserMatchType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *UserMatchType) UnmarshalText(text []byte) error {
	tmp, err := ParseUserMatchType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errUserMatchTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *UserMatchType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = UserMatchType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseUserMatchType(v)
	case []byte:
		*x, err = ParseUserMatchType(string(v))
	case UserMatchType:
		*x = v
	case *UserMatchType:
		if v == nil {
			return errUserMatchTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errUserMatchTypeNilPtr
		}
		*x, err = ParseUserMatchType(*v)
	default:
		return errors.New("invalid type for UserMatchType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x UserMatchType) Value() (driver.Value, error) {
	return x.String(), nil
}
